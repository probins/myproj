{"version":3,"file":"bareindex.js","sources":["../../../proj4js/lib/defs.js","../../../proj4js/lib/parseCode.js","../../../proj4js/lib/extend.js","../../../proj4js/lib/constants/Ellipsoid.js","../../../proj4js/lib/match.js","../../../proj4js/lib/constants/Datum.js","../../../proj4js/lib/Proj.js","../../../proj4js/lib/deriveConstants.js","../../../proj4js/lib/datum.js","../../../proj4js/lib/datum_transform.js","../../../proj4js/lib/datumUtils.js","../../../proj4js/lib/adjust_axis.js","../../../proj4js/lib/checkSanity.js","../../../proj4js/lib/transform.js","../../../proj4js/lib/common/toPoint.js","../../../proj4js/lib/core.js","../../../proj4js/lib/bareindex.js"],"sourcesContent":["// import globals from './global';\n// import parseProj from './projString';\n// import wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    // if (typeof def === 'string') {\n    //   if (def.charAt(0) === '+') {\n    //     defs[name] = parseProj(arguments[1]);\n    //   }\n    //   else {\n    //     defs[name] = wkt(arguments[1]);\n    //   }\n    // } else {\n      defs[name] = def;\n    // }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n}\n\n// add default CRS WGS84/EPSG:4326\ndefs('EPSG:4326', {\n  \"title\": \"WGS 84 (long/lat)\",\n  \"projName\": \"longlat\",\n  \"ellps\": \"WGS84\",\n  \"units\": \"degrees\",\n  \"axis\": \"enu\",\n  \"datumCode\": \"WGS84\",\n  \"datumName\": \"WGS84\",\n  \"datum_params\": [\"0\", \"0\", \"0\"],\n  \"k0\": 1\n});\ndefs.WGS84 = defs['EPSG:4326'];\n\nexport default defs;\n","import defs from './defs';\n// import wkt from 'wkt-parser';\n// import projStr from './projString';\n// import match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\n//  var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\n// function testWKT(code){\n//   return codeWords.some(function (word) {\n//     return code.indexOf(word) > -1;\n//   });\n// }\n// var codes = ['3857', '900913', '3785', '102113'];\n// function checkMercator(item) {\n//   var auth = match(item, 'authority');\n//   if (!auth) {\n//     return;\n//   }\n//   var code = match(auth, 'epsg');\n//   return code && codes.indexOf(code) > -1;\n// }\n// function checkProjStr(item) {\n//   var ext = match(item, 'extension');\n//   if (!ext) {\n//     return;\n//   }\n//   return match(ext, 'proj4');\n// }\n// function testProj(code){\n//   return code[0] === '+';\n// }\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    // if (testWKT(code)) {\n    //   var out = wkt(code);\n    //   // test of spetial case, due to this being a very common and often malformed\n    //   if (checkMercator(out)) {\n    //     return defs['EPSG:3857'];\n    //   }\n    //   var maybeProjStr = checkProjStr(out);\n    //   if (maybeProjStr) {\n    //     return projStr(maybeProjStr);\n    //   }\n    //   return out;\n    // }\n    // if (testProj(code)) {\n    //   return projStr(code);\n    // }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function (coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","import proj4 from './core';\n// import Proj from \"./Proj\";\n// import Point from \"./Point\";\n// import common from \"./common/toPoint\";\nimport defs from \"./defs\";\n// import transform from \"./transform\";\n// import mgrs from \"mgrs\";\n// import includedProjections from \"../projs\";\n\n// proj4.defaultDatum = 'WGS84'; //default datum\n// proj4.Proj = Proj;\n// proj4.WGS84 = new proj4.Proj('WGS84');\n// proj4.Point = Point;\n// proj4.toPoint = common;\nproj4.defs = defs;\n// proj4.transform = transform;\n// proj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\n// includedProjections(proj4);\nexport default proj4;\n"],"names":["defs","name","that","this","arguments","length","def","Array","isArray","map","v","apply","EPSG","ESRI","IAU2000","console","log","parse","code","testObj","testDef","destination","source","value","property","undefined","title","projName","ellps","units","axis","datumCode","datumName","datum_params","k0","WGS84","exports","MERIT","a","rf","ellipseName","SGS85","GRS80","IAU76","airy","b","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","sphere","ignoredChar","match","obj","key","testkey","keys","Object","lkey","toLowerCase","replace","i","Projection","srsCode","callback","error","json","parseCode","ourProj","projections","get","datumDef","Datum","towgs84","split","ellipse","R_A","a2","b2","es","e","sphere_","Ellipsoid","Math","abs","EPSLN","dc_sphere","ecc","SIXTH","RA4","RA6","sqrt","ep2","datumObj","datum","out","datum_type","PJD_NODATUM","PJD_WGS84","parseFloat","PJD_3PARAM","PJD_7PARAM","SEC_TO_RAD","extend","init","checkParams","type","dest","point","compareDatums","p","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","x","Latitude","y","Height","z","HALF_PI","Infinity","PI","sin","cos","geodeticToGeocentric","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricToWgs84","x_tmp","y_tmp","z_tmp","geocentricFromWgs84","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","X","Y","Z","atan2","atan","geocentricToGeodetic","crs","denorm","t","xin","yin","zin","indexOf","checkCoord","num","Number","isFinite","TypeError","transform","wgs84","array","m","checkSanity","checkNotWGS","proj","adjust_axis","D2R","to_meter","inverse","from_greenwich","datum_transform","R2D","forward","ch1903","ggrs87","nad83","nad27","nadgrids","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","start","transformer","from","to","coords","transformedArray","NaN","concat","splice","forEach","checkProj","item","oProj","proj4","fromProj","toProj","coord","single","version"],"mappings":"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"}