{"version":3,"file":"lcc.js","sources":["../../../proj4js/lib/projections/lcc.js","../../projections/lcc.js"],"sourcesContent":["import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import lcc from '../../proj4js/lib/projections/lcc.js';\nimport projections from '../../proj4js/lib/projections.js';\n\nprojections.add(lcc);\n"],"names":["init","this","lat2","lat1","k0","x0","y0","Math","abs","EPSLN","temp","b","a","e","sqrt","sin1","sin","cos1","cos","ms1","msfnz","ts1","tsfnz","sin2","cos2","ms2","ts2","ts0","lat0","ns","log","isNaN","f0","pow","rh","title","forward","p","lon","x","lat","y","PI","sign","HALF_PI","ts","rh1","con","theta","adjust_lon","long0","inverse","atan2","phi2z","names","projections","add","lcc"],"mappings":"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"}